<upgrade-config-changes xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="upgrade-config.xsd">
    <services>
        <service name="NIFI">
            <component name="NIFI_MASTER">
                <changes>

                    <!-- Update these configs in nifi-properties. -->
                    <definition xsi:type="configure" id="hdf_2_0_0_0_update_nifi_properties_configs">
                        <type>nifi-properties</type>
                        <set key="nifi.version" value="1.0.0.{{stack_version_buildnum}}"/>
                    </definition>

                    <definition xsi:type="configure" id="hdf_2_1_0_0_update_nifi_properties_configs">
                        <type>nifi-properties</type>
                        <set key="nifi.version" value="1.1.0.{{stack_version_buildnum}}"/>
                    </definition>

                    <definition xsi:type="configure" id="hdf_3_0_0_0_update_nifi_properties_configs">
                        <type>nifi-properties</type>
                        <set key="nifi.version" value="1.2.0.{{stack_version_buildnum}}"/>
                        <replace key="nifi.content.viewer.url" find="/nifi-content-viewer/" replace-with="../nifi-content-viewer/"/>
                    </definition>

                    <definition xsi:type="configure" id="hdf_3_1_0_0_update_nifi_properties_configs">
                        <type>nifi-properties</type>
                        <set key="nifi.version" value="1.5.0.{{stack_version_buildnum}}"/>
                        <replace key="nifi.content.claim.max.appendable.size" find="10 MB" replace-with="1 MB"/>
                    </definition>

                    <!-- Add these configs to nifi-properties. -->
                    <definition xsi:type="configure" id="hdf_2_1_0_0_add_nifi_properties_configs">
                        <type>nifi-properties</type>
                        <set key="nifi.sensitive.props.additional.keys" value=""/>
                        <set key="nifi.variable.registry.properties" value=""/>
                    </definition>
                    <!-- Add these configs to nifi-ambari-config. -->
                    <definition xsi:type="configure" id="hdf_2_1_0_0_add_nifi_ambari_config_configs">
                        <type>nifi-ambari-config</type>
                        <set key="nifi.security.encrypt.configuration.password" value=""/>
                    </definition>

                    <!-- Update login identity providers -->
                    <definition xsi:type="configure" id="hdf_3_0_0_0_update_login_identity_providers_configs">
                        <type>nifi-login-identity-providers-env</type>
                        <replace key="content" find="&lt;class&gt;org.apache.nifi.ldap.LdapProvider&lt;/class&gt;" replace-with="&lt;class&gt;org.apache.nifi.ldap.LdapProvider&lt;/class&gt;&lt;property name=&quot;Identity Strategy&quot;&gt;USE_DN&lt;/property&gt;"/>
                    </definition>

                    <!-- Update node logback configuration -->
                    <definition xsi:type="configure" id="hdf_3_0_0_0_update_nifi_node_logback_configs">
                        <type>nifi-node-logback-env</type>
                        <replace key="content" find="&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;" replace-with="&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt;"/>
                        <replace key="content" find="&lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;" replace-with=""/>
                        <replace key="content" find="&lt;/timeBasedFileNamingAndTriggeringPolicy&gt;" replace-with=""/>
                        <regex-replace key="content" find="&lt;immediateFlush&gt;(\w+)&lt;/immediateFlush&gt;" replace-with=""/>
                        <replace key="content" find="&lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;" replace-with="&lt;immediateFlush&gt;true&lt;/immediateFlush&gt;&lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;"/>
                        <replace key="content" find="&lt;/configuration&gt;" replace-with="&lt;logger name=&quot;org.apache.calcite.runtime.CalciteException&quot; level=&quot;OFF&quot;/&gt;&lt;/configuration&gt;"/>
                    </definition>

                    <!-- Update bootstrap config -->
                    <definition xsi:type="configure" id="hdf_3_0_0_0_update_nifi_bootstrap_env_configs">
                        <type>nifi-bootstrap-env</type>
                        <insert key="content" value="{% if security_enabled %}" insert-type="append" newline-before="true" newline-after="true"/>
                        <insert key="content" value="java.arg.0=-Djava.security.auth.login.config={{nifi_jaas_conf}}" insert-type="append" newline-after="true"/>
                        <insert key="content" value="{% endif %}" insert-type="append" newline-after="true"/>
                        <insert key="content" value="java.arg.9999=-Djava.security.egd=file:/dev/urandom" insert-type="append" newline-after="true"/>
                    </definition>

                    <!-- Update state management -->
                    <definition xsi:type="configure" id="hdf_3_0_0_0_update_nifi_state_management_env_configs">
                    <type>nifi-state-management-env</type>
                        <replace key="content" find="&lt;class&gt;org.apache.nifi.controller.state.providers.local.WriteAheadLocalStateProvider&lt;/class&gt;&#xA;        &lt;property name=&quot;Directory&quot;&gt;{{nifi_state_dir}}&lt;/property&gt;"
                                 replace-with="&lt;class&gt;org.apache.nifi.controller.state.providers.local.WriteAheadLocalStateProvider&lt;/class&gt;&#xA;
                                       &lt;property name=&quot;Directory&quot;&gt;{{nifi_state_dir}}&lt;/property&gt;&#xA;
                                       &lt;property name=&quot;Always Sync&quot;&gt;false&lt;/property&gt;&#xA;
                                       &lt;property name=&quot;Partitions&quot;&gt;16&lt;/property&gt;&#xA;
                                       &lt;property name=&quot;Checkpoint Interval&quot;&gt;2 mins&lt;/property&gt;&#xA;            "/>
                    </definition>

                    <!-- Update bootstrap notification services -->
                    <definition xsi:type="configure" id="hdf_3_0_0_0_update_nifi_bootstrap_notification_services_env_configs">
                        <type>nifi-bootstrap-notification-services-env</type>
                        <replace key="content" find="&lt;/services&gt;" replace-with="&#xA;
                        &lt;!--&#xA;
                        &lt;service&gt;&#xA;
                        &lt;id&gt;http-notification&lt;/id&gt;&#xA;
                        &lt;class&gt;org.apache.nifi.bootstrap.notification.http.HttpNotificationService&lt;/class&gt;&#xA;
                        &lt;property name=&quot;URL&quot;&gt;&lt;/property&gt;&#xA;
                        &lt;/service&gt;&#xA;
                        --&gt;&#xA;
                        &lt;/services&gt;"/>
                    </definition>

                </changes>
            </component>
        </service>
        <service name="STORM">
            <component name="NIMBUS">
                <changes>
                    <definition xsi:type="configure" id="storm_remove_jmxetric" summary="Removing jmxetric from childopts.">
                        <type>storm-site</type>
                        <regex-replace key="nimbus.childopts" find=" -javaagent:(.*)JVM" replace-with=""/>
                        <regex-replace key="supervisor.childopts" find=" -javaagent:(.*)JVM" replace-with=""/>
                        <regex-replace key="worker.childopts" find=" -javaagent:(.*)JVM" replace-with=""/>
                    </definition>
                    <definition xsi:type="configure" id="hdf_3_1_0_0_update_storm_env_ext_classpath" summary="Change classpath to use wildcard">
                        <type>storm-env</type>
                        <replace key="content" find="export STORM_EXT_CLASSPATH=$STORM_AUTOCREDS_LIB_DIR" replace-with="export STORM_EXT_CLASSPATH=&quot;$STORM_AUTOCREDS_LIB_DIR/*&quot;"/>
                    </definition>
                    <definition xsi:type="configure" id="hdf_3_1_0_0_storm_logsearch_conf" summary="remove commented out worker event and add grok patterns">
                        <type>storm-logsearch-conf</type>
                        <replace key="component_mappings" find="storm_logviewer;" replace-with="storm_logviewer,storm_worker_event;"/>
                        <replace key="content" find="{#&#xA;    ,{&#xA;      &quot;type&quot;:&quot;storm_worker&quot;,&#xA;      &quot;rowtype&quot;:&quot;service&quot;,&#xA;      &quot;path&quot;:&quot;{{default(&apos;/configurations/storm-env/storm_log_dir&apos;, &apos;/var/log/storm&apos;)}}/workers-artifacts/*/*/worker.log&quot;,&#xA;      &quot;init_default_fields&quot;: &quot;true&quot;&#xA;    }&#xA;    #}"
                                 replace-with="            ,{
                &#xA;            &quot;type&quot;:&quot;storm_worker&quot;,
                &#xA;            &quot;rowtype&quot;:&quot;service&quot;,
                &#xA;            &quot;path&quot;:&quot;{{default(&apos;/configurations/storm-env/storm_log_dir&apos;, &apos;/var/log/storm&apos;)}}/workers-artifacts/*/*/worker.log&quot;,
                &#xA;            &quot;init_default_fields&quot;: &quot;true&quot;&#xA;            },&#xA;            {&#xA;            &quot;type&quot;:&quot;storm_worker_event&quot;,
                &#xA;            &quot;rowtype&quot;:&quot;service&quot;,&#xA;            &quot;path&quot;:&quot;{{default(&apos;/configurations/storm-env/storm_log_dir&apos;, &apos;/var/log/storm&apos;)}}/workers-artifacts/*/*/events.log&quot;,
                &#xA;            &quot;init_default_fields&quot;: &quot;true&quot;,&#xA;            &quot;add_fields&quot;: {&#xA;            &quot;level&quot;:&quot;INFO&quot;&#xA;            }
                &#xA;            }"/>
                        <replace key="content" find="&#xA;       }&#xA;     ]&#xA;   }" replace-with="},&#xA;            {&#xA;            &quot;filter&quot;:&quot;grok&quot;,&#xA;            &quot;sort_order&quot;: 5,&#xA;            &quot;conditions&quot;:{&#xA;            &quot;fields&quot;:{&#xA;            &quot;type&quot;:[&#xA;            &quot;storm_worker_event&quot;&#xA;            ]&#xA;            }&#xA;            },
                &#xA;            &quot;log4j_format&quot;:&quot;&quot;,&#xA;            &quot;message_pattern&quot;:&quot;^%{TIMESTAMP_ISO8601:logtime}(!_DELIM_!&amp;lt;STREAMLINE_EVENT&amp;gt;!_DELIM_!%{DATA:sdi_streamline_component_name}!_DELIM_!%{DATA:sdi_streamline_event_id}!_DELIM_!%{DATA:sdi_streamline_root_ids}!_DELIM_!%{DATA:sdi_streamline_parent_ids}!_DELIM_!%{DATA:sdi_streamline_event_fields_and_values}!_DELIM_!%{DATA:sdi_streamline_event_headers}!_DELIM_!%{DATA:sdi_streamline_event_aux_fields_and_values})|(%{GREEDYDATA})&quot;,&#xA;            &quot;post_map_values&quot;:{&#xA;            &quot;logtime&quot;:{&#xA;            &quot;map_date&quot;:{&#xA;            &quot;target_date_pattern&quot;:&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;&#xA;            }&#xA;            }&#xA;            }&#xA;            },
                &#xA;            {&#xA;            &quot;filter&quot;:&quot;grok&quot;,&#xA;            &quot;sort_order&quot;: 6,&#xA;            &quot;conditions&quot;:{&#xA;            &quot;fields&quot;:{&#xA;            &quot;type&quot;:[&#xA;            &quot;storm_worker_event&quot;&#xA;            ]&#xA;            }&#xA;            },&#xA;            &quot;source_field&quot;: &quot;path&quot;,&#xA;            &quot;remove_source_field&quot;: &quot;false&quot;,&#xA;            &quot;message_pattern&quot;:&quot;{{default(&apos;/configurations/storm-env/storm_log_dir&apos;, &apos;/var/log/storm&apos;)}}/workers-artifacts/%{DATA:sdi_storm_topology_id}/%{DATA:sdi_storm_worker_port}/events\\.log&quot;&#xA;            },
                &#xA;            {&#xA;            &quot;filter&quot;:&quot;grok&quot;,&#xA;            &quot;sort_order&quot;: 7,&#xA;            &quot;conditions&quot;:{&#xA;            &quot;fields&quot;:{&#xA;            &quot;type&quot;:[&#xA;            &quot;storm_worker_event&quot;&#xA;            ]&#xA;            }&#xA;            },&#xA;            &quot;source_field&quot;: &quot;sdi_storm_topology_id&quot;,&#xA;            &quot;remove_source_field&quot;: &quot;false&quot;,&#xA;            &quot;message_pattern&quot;:&quot;(streamline\\-%{DATA:sdi_streamline_topology_id}\\-%{DATA:sdi_streamline_topology_name}\\-[0-9]+\\-[0-9]+)|(%{DATA:sdi_storm_topology_id})&quot;&#xA;            }&#xA;            ]&#xA;            }"/>
                    </definition>
                </changes>
            </component>
        </service>
    </services>
</upgrade-config-changes>