<?xml version="1.0"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<upgrade xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="upgrade-pack.xsd">
    <target>3.1.*.*</target>
    <target-stack>HDF-3.1</target-stack>
    <downgrade-allowed>true</downgrade-allowed>
    <type>NON_ROLLING</type>
    <prerequisite-checks/>

    <order>
        <group xsi:type="cluster" name="PRE_CLUSTER" title="Prepare Upgrade">
            <direction>UPGRADE</direction>
            <skippable>true</skippable>
            <supports-auto-skip-failure>false</supports-auto-skip-failure>

            <execute-stage service="STREAMLINE" component="STREAMLINE_SERVER" title="Confirm Required Components Are Installed">
                <task xsi:type="manual">
                    <message>Streaming Analytics Manager requires Ambari Infra and Logsearch to be installed. If these components are not installed please use the Downgrade option, install both components, and return to upgrade.</message>
                </task>
            </execute-stage>

            <execute-stage service="STORM" component="NIMBUS" title="Stop Storm Topologies">
                <task xsi:type="manual">
                    <message>Before continuing, please deactivate and kill any currently running topologies.</message>
                </task>
            </execute-stage>

            <execute-stage service="NIFI" component="NIFI_MASTER" title="Review NIFI Flows">
                <task xsi:type="manual">
                    <message>Please determine if you need to stop any currently running NIFI flows before proceeding with this upgrade.</message>
                </task>
            </execute-stage>

            <execute-stage service="REGISTRY" component="REGISTRY_SERVER" title="Review Registry Integrations">
                <task xsi:type="manual">
                    <message>Please determine if you need to stop any currently running process thats using Registry server to lookup schemas.
                    </message>
                </task>
            </execute-stage>

        </group>

        <group xsi:type="stop" name="STOP_HIGH_LEVEL_SERVICE_COMPONENTS" title="Stop Components for High-Level Services">
            <service-check>false</service-check>
            <skippable>true</skippable>
            <supports-auto-skip-failure>false</supports-auto-skip-failure>
            <parallel-scheduler/>

            <service name="STORM">
                <component>DRPC_SERVER</component>
                <component>STORM_UI_SERVER</component>
                <component>SUPERVISOR</component>
                <component>NIMBUS</component>
            </service>

            <service name="NIFI">
                <component>NIFI_MASTER</component>
            </service>

            <service name="REGISTRY">
                <component>REGISTRY_SERVER</component>
            </service>

            <service name="STREAMLINE">
                <component>STREAMLINE_SERVER</component>
            </service>

        </group>

        <group xsi:type="cluster" name="Backups" title="Perform Backups">
            <direction>UPGRADE</direction>
            <skippable>true</skippable>
            <supports-auto-skip-failure>false</supports-auto-skip-failure>


            <execute-stage service="RANGER" component="RANGER_ADMIN" title="Backup Ranger Database">
                <task xsi:type="manual">
                    <message>Before continuing, please backup the Ranger Admin database and Ranger Audit database on the following host(s): {{hosts.all}}. If audit database size is too large (greater than 3GB) then follow the below instructions:
                        1. Backup the audit table from audit database.
                        2. Truncate audit table.
                        3. Follow upgrade process and once completed then restore audit data to audit table.</message>
                </task>
            </execute-stage>

            <execute-stage service="STREAMLINE" component="STREAMLINE_SERVER" title="Backup SAM Database">
                <task xsi:type="manual">
                    <message>Before continuing, please backup the SAM database.</message>
                </task>
            </execute-stage>

            <execute-stage service="REGISTRY" component="REGISTRY_SERVER" title="Backup Registry Database">
                <task xsi:type="manual">
                    <message>Before continuing, please backup the Registry database.</message>
                </task>
            </execute-stage>
        </group>

        <group xsi:type="stop" name="STOP_LOW_LEVEL_SERVICE_COMPONENTS" title="Stop Components for Core Services">
            <service-check>false</service-check>
            <skippable>true</skippable>
            <supports-auto-skip-failure>false</supports-auto-skip-failure>
            <parallel-scheduler/>

            <service name="KAFKA">
                <component>KAFKA_BROKER</component>
            </service>

            <service name="RANGER">
                <component>RANGER_USERSYNC</component>
                <component>RANGER_ADMIN</component>
                <component>RANGER_TAGSYNC</component>
            </service>

            <service name="ZOOKEEPER">
                <component>ZOOKEEPER_SERVER</component>
            </service>

            <service name="REGISTRY">
                <component>REGISTRY_SERVER</component>
            </service>

            <service name="STREAMLINE">
                <component>STREAMLINE_SERVER</component>
            </service>

        </group>

        <group xsi:type="cluster" name="Restore Backups" title="Restore Backups">
            <direction>DOWNGRADE</direction>
            <skippable>true</skippable>

            <!-- If the user attempts a downgrade after this point, they will need to restore backups
            before starting any of the services. -->

            <execute-stage service="RANGER" component="RANGER_ADMIN" title="Restore Ranger Database">
                <task xsi:type="manual">
                    <message>Before continuing, please restore the Ranger Admin database and Ranger Audit database on the following host(s): {{hosts.all}}.</message>
                </task>
            </execute-stage>

            <execute-stage service="STREAMLINE" component="STREAMLINE_SERVER" title="Restore SAM Database">
                <task xsi:type="manual">
                    <message>Before continuing, please restore the SAM database on the following host(s): {{hosts.all}}.</message>
                </task>
            </execute-stage>

            <execute-stage service="REGISTRY" component="REGISTRY_SERVER" title="Restore Registry Database">
                <task xsi:type="manual">
                    <message>Before continuing, please restore the Registry database on the following host(s): {{hosts.all}}.</message>
                </task>
            </execute-stage>

        </group>

        <!-- After processing this group, will change the effective Stack of the UpgradeContext object. -->
        <group xsi:type="update-stack" name="UPDATE_DESIRED_REPOSITORY_ID" title="Update Target Repositories">
            <execute-stage title="Update Target Repositories">
                <task xsi:type="server_action" class="org.apache.ambari.server.serveraction.upgrades.UpdateDesiredRepositoryAction"/>
            </execute-stage>
        </group>


        <group xsi:type="cluster" name="Upgrade Service Configs" title="Upgrade Service Configs">
            <direction>UPGRADE</direction>
            <skippable>true</skippable>

            <!--ZOOKEEPER-->
            <execute-stage service="ZOOKEEPER" component="ZOOKEEPER_SERVER" title="Parameterizing Zookeeper Log4J Properties">
                <task xsi:type="configure" id="zookeeper_log4j_parameterize">
                    <summary>Updating the Zookeeper Log4J properties to include parameterizations</summary>
                </task>
            </execute-stage>

            <!-- STORM -->
            <execute-stage service="STORM" component="NIMBUS" title="Update config changes for Storm">
                <task xsi:type="configure" id="hdf_3_1_0_0_update_storm_env_ext_classpath"/>
            </execute-stage>

            <execute-stage service="STORM" component="NIMBUS" title="Apply config changes for Nimbus">
                <task xsi:type="configure" id="increase_storm_zookeeper_timeouts"/>
            </execute-stage>

            <execute-stage service="STORM" component="NIMBUS" title="Parameterizing Storm worker Log4J Properties">
                <task xsi:type="configure" id="storm_worker_log4j_parameterize">
                    <summary>Updating the Storm worker Log4J properties to include parameterizations</summary>
                </task>
            </execute-stage>
            <execute-stage service="STORM" component="NIMBUS" title="Parameterizing Storm cluster Log4J Properties">
                <task xsi:type="configure" id="storm_cluster_log4j_parameterize">
                    <summary>Updating the Storm cluster Log4J properties to include parameterizations</summary>
                </task>
            </execute-stage>
            <execute-stage service="STORM" component="NIMBUS" title="Removing jmxetric from childopts">
                <task xsi:type="configure" id="storm_remove_jmxetric"/>
            </execute-stage>
            <execute-stage service="STORM" component="NIMBUS" title="Updating storm logsearch config">
                <task xsi:type="configure" id="hdf_3_1_0_0_storm_logsearch_conf"/>
            </execute-stage>

            <!--KAFKA-->
            <execute-stage service="KAFKA" component="KAFKA_BROKER" title="Parameterizing Kafka Log4J Properties">
                <task xsi:type="configure" id="kafka_log4j_parameterize">
                    <summary>Updating the Kafka Log4J properties to include parameterizations</summary>
                </task>
            </execute-stage>

            <execute-stage service="KAFKA" component="KAFKA_BROKER" title="Add interbroker protocol version">
                <task xsi:type="configure" id="add_inter_broker_protocol_version">
                    <summary>Update kafka server properties to add inter.broker.protocol.version</summary>
                </task>
            </execute-stage>

            <execute-stage service="KAFKA" component="KAFKA_BROKER" title="Add log message format version">
                <task xsi:type="configure" id="add_skip_log_message_format_version">
                    <summary>Update kafka server properties to add log.message.format.version if not present. </summary>
                </task>
            </execute-stage>

            <!-- NIFI -->
            <execute-stage service="NIFI" component="NIFI_MASTER" title="Update config changes for Nifi Master">
                <task xsi:type="configure" id="hdf_3_1_0_0_update_nifi_properties_configs"/>
            </execute-stage>

           <!--RANGER-->

            <execute-stage service="RANGER" component="RANGER_ADMIN" title="Apply config changes for Ranger Admin">
                <task xsi:type="configure" id="hdf_3_1_0_remove_bind_anonymous"/>
            </execute-stage>

            <execute-stage service="STORM" component="NIMBUS" title="Apply config changes for Storm AutoCreds">
                <task xsi:type="configure" id="storm_nimbus_autocred_config"/>
            </execute-stage>

            <execute-stage service="RANGER" component="RANGER_ADMIN" title="Parameterizing Ranger Admin Log4J Properties">
                <task xsi:type="configure" id="admin_log4j_parameterize">
                    <summary>Updating the Ranger admin Log4J properties to include parameterizations</summary>
                </task>
            </execute-stage>

            <execute-stage service="RANGER" component="RANGER_USERSYNC" title="Parameterizing Ranger Usersync Log4J Properties">
                <task xsi:type="configure" id="usersync_log4j_parameterize">
                    <summary>Updating the Ranger usersync Log4J properties to include parameterizations</summary>
                </task>
            </execute-stage>
            <execute-stage service="RANGER" component="RANGER_TAGSYNC" title="Parameterizing Ranger Tagsync Log4J Properties">
                <task xsi:type="configure" id="tagsync_log4j_parameterize">
                    <summary>Updating the Ranger tagsync Log4J properties to include parameterizations</summary>
                </task>
            </execute-stage>
            <execute-stage service="RANGER" component="RANGER_USERSYNC" title="Apply config changes for Ranger Usersync">
                <task xsi:type="configure" id="hdf_3_1_0_disable_delta_sync_during_upgrade"/>
            </execute-stage>

            <!--STREAMLINE-->
            <execute-stage service="STREAMLINE" component="STREAMLINE_SERVER" title="Apply config changes for SAM log4j">
                <task xsi:type="configure" id="hdf_3_1_0_0_update_streamline_log4j"/>
            </execute-stage>

            <execute-stage service="STREAMLINE" component="STREAMLINE_SERVER" title="Apply config changes for SAM jaas">
                <task xsi:type="configure" id="hdf_3_1_0_0_update_streamline_jaas_config"/>
            </execute-stage>

            <!--REGISTRY-->
            <execute-stage service="REGISTRY" component="REGISTRY_SERVER" title="Apply config changes for Registry log4j">
                <task xsi:type="configure" id="hdf_3_1_0_0_update_registry_log4j"/>
            </execute-stage>


        </group>

        <!--
        After processing this group, the user-specified Kerberos descriptor will be updated to work with
        the new stack-level Kerberos descriptor.
        -->
        <group xsi:type="cluster" name="UPDATE_KERBEROS_DESCRIPTORS" title="Update Kerberos Descriptors">
            <condition xsi:type="security" type="kerberos"/>
            <execute-stage title="Update the user-specified Kerberos descriptor">
                <task xsi:type="server_action" class="org.apache.ambari.server.serveraction.upgrades.UpgradeUserKerberosDescriptor"/>
            </execute-stage>
        </group>

        <!--
        NOTE: We need to create streamline and registry config versions only during HDF-3.0 -> HDF-3.1 upgrade.
        Reason:
        hdfconf-select supports streamline and registry in HDF-3.1. So we need to explicitly invoke hdfconf-select
        after stopping these services running on HDF-3.0 and after switching the stack version to HDF-3.1
        -->
        <group xsi:type="cluster" name="CREATE_STREAMLINE_CONFIG_VERSION" title="Streamline - Create Streamline Config Version">
            <service-check>false</service-check>
            <skippable>true</skippable>
            <supports-auto-skip-failure>false</supports-auto-skip-failure>

            <execute-stage service="STREAMLINE" component="STREAMLINE_SERVER" title="Create Streamline Config Version">
                <task xsi:type="execute" hosts="all">
                    <summary>Create Streamline Config Version</summary>
                    <script>scripts/streamline_server.py</script>
                    <function>create_config_version</function>
                </task>
            </execute-stage>
        </group>

        <group xsi:type="cluster" name="CREATE_REGISTRY_CONFIG_VERSION" title="Registry - Create Registry Config Version">
            <service-check>false</service-check>
            <skippable>true</skippable>
            <supports-auto-skip-failure>false</supports-auto-skip-failure>

            <execute-stage service="REGISTRY" component="REGISTRY_SERVER" title="Create Registry Config Version">
                <task xsi:type="execute" hosts="all">
                    <summary>Create Registry Config Version</summary>
                    <script>scripts/registry_server.py</script>
                    <function>create_config_version</function>
                </task>
            </execute-stage>
        </group>

        <!--
        Invoke "hdp-select set all" to change any components we may have missed
        that are installed on the hosts but not known by Ambari.
        -->
        <group xsi:type="cluster" name="ALL_HOST_OPS" title="Set Version On All Hosts">
            <scope>COMPLETE</scope>
            <skippable>true</skippable>
            <supports-auto-skip-failure>false</supports-auto-skip-failure>

            <execute-stage title="Update stack to {{version}}">
                <task xsi:type="execute">
                    <script>scripts/ru_set_all.py</script>
                    <function>actionexecute</function>
                </task>
            </execute-stage>
        </group>

        <!-- Now, restart all of the services. -->
        <group xsi:type="restart" name="ZOOKEEPER" title="ZooKeeper">
            <service-check>false</service-check>
            <skippable>true</skippable>
            <supports-auto-skip-failure>false</supports-auto-skip-failure>
            <parallel-scheduler/>
            <service name="ZOOKEEPER">
                <component>ZOOKEEPER_SERVER</component>
                <component>ZOOKEEPER_CLIENT</component>
            </service>
        </group>

        <group xsi:type="restart" name="RANGER" title="Ranger">
            <service-check>false</service-check>
            <skippable>true</skippable>
            <supports-auto-skip-failure>false</supports-auto-skip-failure>
            <parallel-scheduler/>
            <service name="RANGER">
                <component>RANGER_ADMIN</component>
                <component>RANGER_USERSYNC</component>
                <component>RANGER_TAGSYNC</component>
            </service>
        </group>

        <group xsi:type="restart" name="KAFKA" title="Kafka">
            <service-check>false</service-check>
            <skippable>true</skippable>
            <parallel-scheduler/>
            <service name="KAFKA">
                <component>KAFKA_BROKER</component>
            </service>
        </group>

        <group name="SERVICE_CHECK_1" title="All Service Checks" xsi:type="service-check">
            <direction>UPGRADE</direction>
            <skippable>true</skippable>
            <priority>
                <service>ZOOKEEPER</service>
                <service>RANGER</service>
                <service>KAFKA</service>
            </priority>
        </group>

        <group xsi:type="restart" name="STORM" title="Storm">
            <service-check>false</service-check>
            <skippable>true</skippable>
            <parallel-scheduler/>
            <service name="STORM">
                <component>NIMBUS</component>
                <component>SUPERVISOR</component>
                <component>STORM_UI_SERVER</component>
                <component>DRPC_SERVER</component>
            </service>
        </group>

        <group xsi:type="restart" name="NIFI" title="Nifi">
            <service-check>false</service-check>
            <skippable>true</skippable>
            <parallel-scheduler/>
            <service name="NIFI">
                <component>NIFI_MASTER</component>
            </service>
        </group>

        <group xsi:type="restart" name="REGISTRY" title="Registry">
            <service-check>false</service-check>
            <skippable>true</skippable>
            <parallel-scheduler/>
            <service name="REGISTRY">
                <component>REGISTRY_SERVER</component>
            </service>
        </group>

        <group xsi:type="restart" name="STREAMLINE" title="Streaming Analytics Manager">
            <service-check>false</service-check>
            <skippable>true</skippable>
            <parallel-scheduler/>
            <service name="STREAMLINE">
                <component>STREAMLINE_SERVER</component>
            </service>
        </group>

        <group name="SERVICE_CHECK_3" title="All Service Checks" xsi:type="service-check">
            <direction>UPGRADE</direction>
            <skippable>true</skippable>
            <priority>
                <service>STORM</service>
                <service>NIFI</service>
                <service>REGISTRY</service>
                <service>STREAMLINE</service>
            </priority>
        </group>

        <group xsi:type="cluster" name="FINALIZE_PRE_CHECK" title="Finalize {{direction.text.proper}} Pre-Check">
            <direction>UPGRADE</direction>

            <execute-stage title="Check Component Versions">
                <task xsi:type="server_action" class="org.apache.ambari.server.serveraction.upgrades.ComponentVersionCheckAction" />
            </execute-stage>
        </group>

        <group xsi:type="cluster" name="POST_CLUSTER" title="Finalize {{direction.text.proper}}">
            <skippable>true</skippable>
            <supports-auto-skip-failure>false</supports-auto-skip-failure>

            <execute-stage title="Confirm Finalize">
                <direction>UPGRADE</direction>
                <task xsi:type="manual">
                    <message>Please confirm you are ready to finalize.</message>
                </task>
            </execute-stage>

            <execute-stage title="Save Cluster State">
                <task xsi:type="server_action" class="org.apache.ambari.server.serveraction.upgrades.FinalizeUpgradeAction">
                </task>
            </execute-stage>

        </group>
    </order>

    <processing>
        <service name="ZOOKEEPER">
            <component name="ZOOKEEPER_SERVER">
                <upgrade>
                    <task xsi:type="restart-task"/>
                </upgrade>
            </component>

            <component name="ZOOKEEPER_CLIENT">
                <upgrade>
                    <task xsi:type="restart-task"/>
                </upgrade>
            </component>
        </service>

        <service name="RANGER">
            <component name="RANGER_ADMIN">
                <pre-upgrade>

                    <task xsi:type="execute" hosts="all">
                        <script>scripts/ranger_admin.py</script>
                        <function>set_pre_start</function>
                    </task>

                    <task xsi:type="execute" hosts="any">
                        <summary>Upgrading Ranger database schema</summary>
                        <script>scripts/ranger_admin.py</script>
                        <function>setup_ranger_database</function>
                    </task>

                    <task xsi:type="configure_function" hosts="all" />

                    <task xsi:type="execute" hosts="any">
                        <summary>Applying Ranger java patches</summary>
                        <script>scripts/ranger_admin.py</script>
                        <function>setup_ranger_java_patches</function>
                    </task>
                </pre-upgrade>
                <pre-downgrade copy-upgrade="true" />

                <upgrade>
                    <task xsi:type="restart-task"/>
                </upgrade>

            </component>

            <component name="RANGER_USERSYNC">
                <upgrade>
                    <task xsi:type="restart-task"/>
                </upgrade>
            </component>

            <component name="RANGER_TAGSYNC">
                <upgrade>
                    <task xsi:type="restart-task"/>
                </upgrade>
            </component>
        </service>

        <service name="KAFKA">
            <component name="KAFKA_BROKER">
                <upgrade>
                    <task xsi:type="restart-task"/>
                </upgrade>
            </component>
        </service>

        <service name="STORM">
            <component name="NIMBUS">
                <upgrade>
                    <task xsi:type="restart-task"/>
                </upgrade>
            </component>

            <component name="SUPERVISOR">
                <upgrade>
                    <task xsi:type="restart-task"/>
                </upgrade>
            </component>

            <component name="STORM_UI_SERVER">
                <upgrade>
                    <task xsi:type="restart-task"/>
                </upgrade>
            </component>

            <component name="DRPC_SERVER">
                <upgrade>
                    <task xsi:type="restart-task"/>
                </upgrade>
            </component>
        </service>

        <service name="NIFI">
            <component name="NIFI_MASTER">
                <upgrade>
                    <task xsi:type="restart-task"/>
                </upgrade>
            </component>
        </service>

        <service name="REGISTRY">
            <component name="REGISTRY_SERVER">
                <upgrade>
                    <task xsi:type="restart-task"/>
                </upgrade>
            </component>
        </service>

        <service name="STREAMLINE">
            <component name="STREAMLINE_SERVER">
                <upgrade>
                    <task xsi:type="restart-task"/>
                </upgrade>
            </component>
        </service>

    </processing>
</upgrade>
