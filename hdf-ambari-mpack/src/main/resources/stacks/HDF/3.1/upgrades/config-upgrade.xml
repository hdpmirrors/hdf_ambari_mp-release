<upgrade-config-changes xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="upgrade-config.xsd">

    <services>

        <service name="KAFKA">
          <component name="KAFKA_BROKER">
            <changes>
              <definition xsi:type="configure" id="hdf_3_1_maint_ranger_kafka_plugin_cluster_name">
                <type>ranger-kafka-audit</type>
                <set key="ranger.plugin.kafka.ambari.cluster.name" value="{{cluster_name}}"
                  if-type="ranger-kafka-plugin-properties" if-key="ranger-kafka-plugin-enabled" if-key-state="present"/>
              </definition>
              <definition xsi:type="configure" id="hdf_3_1_kafka_plaintext_sasl_config_change">
                <type>kafka-broker</type>
                <set key="security.inter.broker.protocol" value="SASL_PLAINTEXT"
                       if-type="kafka-broker" if-key="security.inter.broker.protocol" if-value="PLAINTEXTSASL"/>
                <replace key="listeners" find="PLAINTEXTSASL://" replace-with="SASL_PLAINTEXT://"/>
              </definition>
            </changes>
          </component>
        </service>

        <service name="STORM">
          <component name="NIMBUS">
            <changes>
              <definition xsi:type="configure" id="hdf_3_1_maint_ranger_storm_plugin_cluster_name">
                <type>ranger-storm-audit</type>
                <set key="ranger.plugin.storm.ambari.cluster.name" value="{{cluster_name}}"
                  if-type="ranger-storm-plugin-properties" if-key="ranger-storm-plugin-enabled" if-key-state="present"/>
              </definition>
              <definition xsi:type="configure" id="storm_nimbus_autocred_config" summary="Update Storm's Nimbus AutoCred config">
                <type>storm-site</type>
                <set key="nimbus.autocredential.plugins.classes" value="['org.apache.storm.hdfs.security.AutoHDFS', 'org.apache.storm.hbase.security.AutoHBase', 'org.apache.storm.hive.security.AutoHive']" if-type="streamline-common" if-key="authorizer.class.name" if-key-state="present"/>
                <set key="nimbus.credential.renewers.classes" value="['org.apache.storm.hdfs.security.AutoHDFS', 'org.apache.storm.hbase.security.AutoHBase', 'org.apache.storm.hive.security.AutoHive']" if-type="streamline-common" if-key="authorizer.class.name" if-key-state="present"/>
                <set key="nimbus.credential.renewers.freq.secs" value="82800" if-type="streamline-common" if-key="authorizer.class.name" if-key-state="present"/>
              </definition>
              <definition xsi:type="configure" id="storm_remove_jmxetric" summary="Removing jmxetric from childopts.">
                <type>storm-site</type>
                <regex-replace key="nimbus.childopts" find=" -javaagent:(.*)JVM" replace-with=""/>
                <regex-replace key="supervisor.childopts" find=" -javaagent:(.*)JVM" replace-with=""/>
                <regex-replace key="worker.childopts" find=" -javaagent:(.*)JVM" replace-with=""/>
              </definition>
            </changes>
          </component>
        </service>

        <service name="NIFI">
            <component name="NIFI_MASTER">
                <changes>

                    <!-- Update these configs in nifi-properties. -->
                    <definition xsi:type="configure" id="hdf_3_1_0_0_update_nifi_properties_configs">
                        <type>nifi-properties</type>
                        <set key="nifi.version" value="1.5.0.{{stack_version_buildnum}}"/>
                    </definition>

                    <!-- Update these configs in nifi-properties. -->
                    <definition xsi:type="configure" id="hdf_3_2_0_0_update_nifi_properties_configs">
                        <type>nifi-properties</type>
                        <set key="nifi.version" value="1.6.0.{{stack_version_buildnum}}"/>
                    </definition>

                    <!-- Update environment in nifi-env -->
                    <definition xsi:type="configure" id="hdf_3_2_0_0_update_nifi_env_configs">
                        <type>nifi-env</type>
                        <insert key="content" value="export NIFI_ALLOW_EXPLICIT_KEYTAB={{nifi_allow_explicit_keytab}}" insert-type="append" newline-before="true" newline-after="true"/>
                    </definition>

                    <definition xsi:type="configure" id="hdf_3_2_0_0_update_nifi_ambari_configs">
                        <type>nifi-ambari-config</type>
                        <set key="nifi.allow.explicit.keytab" value="true"/>
                    </definition>

                    <!-- Remove configuration from nifi-properties -->
                    <definition xsi:type="configure" id="hdf_3_3_remove_need_client_auth_nifi_properties">
                        <type>nifi-properties</type>
                        <transfer operation="delete" delete-key="nifi.security.needClientAuth" />
                    </definition>

                    <!-- Remove configuration from nifi-ambari-ssl-config -->
                    <definition xsi:type="configure" id="hdf_3_3_remove_need_client_auth_nifi_ambari_ssl_config">
                        <type>nifi-ambari-ssl-config</type>
                        <transfer operation="delete" delete-key="nifi.security.needClientAuth" />
                    </definition>

                </changes>
            </component>
        </service>

        <service name="NIFI_REGISTRY">
            <component name="NIFI_REGISTRY_MASTER">
                <changes>

                    <!-- Update these configs in nifi-registry-properties. -->
                    <definition xsi:type="configure" id="hdf_3_2_0_0_update_nifi_registry_properties_configs">
                        <type>nifi-registry-properties</type>
                        <set key="nifi.registry.db.password" value="nifireg"/>
                    </definition>

                </changes>
            </component>
        </service>

        <service name="REGISTRY">
            <component name="REGISTRY_SERVER">
                <changes>
                    <!-- Update these configs in registry  -->
                    <definition xsi:type="configure" id="hdf_3_2_0_0_add_httpProxy_params">
                    <type>registry-common</type>
                        <set key="httpProxyServer" value=""/>
                        <set key="httpProxyUsername" value=""/>
                        <set key="httpProxyPassword" value=""/>
                    </definition>

                    <definition xsi:type="configure" id="hdf_3_3_0_0_kerberos_non_browser_user_agents">
                    <type>registry-common</type>
                        <set key="registry.kerberos.non-browser.user-agents" value=""/>
                    </definition>

                </changes>
            </component>
        </service>

        <service name="RANGER">
          <component name="RANGER_ADMIN">
            <changes>
              <definition xsi:type="configure" id="hdf_3_3_0_0_ranger_services_heap_size_configuration" summary="Upgrading ranger-env configurations for Ranger service components">
                <type>ranger-env</type>
                <set key="ranger_admin_max_heap_size" value="1g" if-type="ranger-env" if-key="ranger_admin_max_heap_size" if-key-state="absent"/>
                <set key="ranger_usersync_max_heap_size" value="1g" if-type="ranger-env" if-key="ranger_usersync_max_heap_size" if-key-state="absent"/>
                <set key="ranger_tagsync_max_heap_size" value="1g" if-type="ranger-env" if-key="ranger_tagsync_max_heap_size" if-key-state="absent"/>
              </definition>
              <definition xsi:type="configure" id="hdf_3_3_0_0_ranger_patch_retry_configuration" summary="Upgrading admin-properties configurations for Ranger service components">
                <type>admin-properties</type>
                <set key="PATCH_RETRY_INTERVAL" value="120" if-type="admin-properties" if-key="PATCH_RETRY_INTERVAL" if-key-state="absent"/>
              </definition>
            </changes>
          </component>
        </service>

    </services>

</upgrade-config-changes>
